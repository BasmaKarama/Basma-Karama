{
	"info": {
		"_postman_id": "c526b291-8df6-425a-9f60-4184046ddb3b",
		"name": "API Playground",
		"description": "These requests showcase some of the things you can do with the API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Highest Priced Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check total is a number \", function () {\r",
							"  \r",
							"    pm.expect(jsonData.total).to.be.a('Number');\r",
							"});\r",
							"pm.test(\"Check data is array \", function () {\r",
							"  \r",
							"    pm.expect(jsonData.data).to.be.a('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of the name\", function () {\r",
							"  \r",
							"    pm.expect(jsonData.data[0].name).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check Limit Number\", function () {\r",
							"  \r",
							"    pm.expect(jsonData.limit).to.be.eql(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Check Skip Number\", function () {\r",
							"  \r",
							"    pm.expect(jsonData.skip).to.be.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Chech Highest Price Limit\", function () {\r",
							" \r",
							"   jsonData.data.forEach(dataObj=>{\r",
							"        console.log(\"price range\",dataObj.price>100000)   \r",
							"pm.expect(dataObj.price>100000).to.be.true\r",
							"  \r",
							"})\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3030/products?$sort[price]=-1",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"products"
					],
					"query": [
						{
							"key": "$sort[price]",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Product Name and Description Only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Body doesnt have Price\", function () \r",
							"{\r",
							"    pm.expect(pm.response.text()).to.not.include(\"price\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3030/products?$select[]=name&$select[]=description",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"products"
					],
					"query": [
						{
							"key": "$select[]",
							"value": "name"
						},
						{
							"key": "$select[]",
							"value": "description"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TVs with free shipping and price between $500 and $800",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check Price Range\", function () {\r",
							"   jsonData.data.forEach(dataObj=>{\r",
							"        // console.log(\"price range\",dataObj.price<700&&dataObj.price>500)   \r",
							"pm.expect(dataObj.price<800&&dataObj.price>500).to.be.true  \r",
							"})\r",
							"  });\r",
							"\r",
							" pm.test(\"Check Shipping is free\", function () {\r",
							"   jsonData.data.forEach(dataObj=>{\r",
							"pm.expect(dataObj.shipping=0).to.be.eql(0);\r",
							"  \r",
							"})\r",
							"  });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3030/products?category.name=TVs&price[$gt]=500&price[$lt]=800&shipping[$eq]=0",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"products"
					],
					"query": [
						{
							"key": "category.name",
							"value": "TVs"
						},
						{
							"key": "price[$gt]",
							"value": "500"
						},
						{
							"key": "price[$lt]",
							"value": "800"
						},
						{
							"key": "shipping[$eq]",
							"value": "0"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Category Names Only",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3030/categories",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories"
					],
					"query": [
						{
							"key": "$select[]",
							"value": "name",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Categories with TV in the name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Name Includes TV\", function () \r",
							"{\r",
							"    pm.expect(pm.response.text()).to.include(\"TV\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3030/categories?name[$like]=*TV*",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories"
					],
					"query": [
						{
							"key": "name[$like]",
							"value": "*TV*"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Find stores in Minnesota",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"State = MN\", function () {\r",
							"  \r",
							"    pm.expect(jsonData.data[\"state\"]).to.be.eql(\"MN\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3030/stores?state=MN",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"stores"
					],
					"query": [
						{
							"key": "state",
							"value": "MN"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Find stores that sell Apple products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check apple shop Existance\", function () {\r",
							"  let mycheck=false\r",
							"   jsonData.data.forEach(dataObj=>{\r",
							"            let myservices = dataObj.services\r",
							"   myservices.forEach(singleService =>{\r",
							"    // console.log(singleService.name == \"Apple Shop\")\r",
							"    if (!mycheck){\r",
							"        mycheck=singleService.name==\"Apple Shop\"\r",
							"    }\r",
							"  })\r",
							"})\r",
							"  pm.expect(mycheck).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3030/stores?service.name=Apple Shop",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"stores"
					],
					"query": [
						{
							"key": "service.name",
							"value": "Apple Shop"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Find Stores Within 10 Miles of Beverly Hills",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3030/stores?near=90210&service.name=Windows%20Store",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"stores"
					],
					"query": [
						{
							"key": "near",
							"value": "90210"
						},
						{
							"key": "service.name",
							"value": "Windows%20Store"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"name\",\"new product\")\r",
							"\r",
							"pm.variables.set(\"type\",\"Hard Good\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code message : Created\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Expected name = actual name\", function () {\r",
							"pm.variables.get(\"name\")\r",
							"var name_1 = pm.variables.get(\"name\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check Created Product Type\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.type).to.eql(\"Hard Good\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.eql(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function() {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"type\": \"{{type}}\",\n\t\"upc\": \"12345676\",\n\t\"price\": 99.99,\n\t\"description\": \"This is a placeholder request for creating a new product.\",\n\t\"model\": \"NP12345\"\n}"
				},
				"url": {
					"raw": "http://localhost:3030/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Store",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"name\",\"new store\")",
							"",
							"pm.variables.set(\"type\",\"Big Box\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code message : Created\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Expected name = actual name\", function () {\r",
							"pm.variables.get(\"name\")\r",
							"var name_1 = pm.variables.get(\"name\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check Created store Type\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.type).to.eql(\"Big Box\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.eql(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function() {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{      \n\t  \"name\": \"{{name}}\",\n      \"type\": \"{{type}}\",\n      \"address\": \"123 Fake St\",\n      \"address2\": \"\",\n      \"city\": \"Springfield\",\n      \"state\": \"MN\",\n      \"zip\": \"55123\",\n      \"lat\": 44.969658,\n      \"lng\": -93.449539,\n      \"hours\": \"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\"\n}"
				},
				"url": {
					"raw": "http://localhost:3030/stores",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Service",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code message : Created\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Expected name = actual name\", function () {\r",
							"pm.variables.get(\"name\")\r",
							"var name_1 = pm.variables.get(\"name\")\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.eql(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function() {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"name\",\"new Service\")",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{      \n\t  \"name\": \"{{name}}\"\n}"
				},
				"url": {
					"raw": "http://localhost:3030/services",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"services"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Category",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"name\",\"new Category\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code message : Created\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Expected name = actual name\", function () {\r",
							"pm.variables.get(\"name\")\r",
							"var name_1 = pm.variables.get(\"name\")\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.eql(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function() {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{      \n\t\"id\": \"pcmcat12345\",\n\t\"name\": \"{{name}}\"\n}"
				},
				"url": {
					"raw": "http://localhost:3030/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories"
					]
				}
			},
			"response": []
		}
	]
}